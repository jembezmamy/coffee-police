{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","coffee-police/tests/helpers/finish-render.js","coffee-police/tests/helpers/image.js","coffee-police/tests/integration/components/people-list/component-test.js","coffee-police/tests/integration/components/people-list/form/component-test.js","coffee-police/tests/integration/components/people-list/item/component-test.js","coffee-police/tests/integration/components/person-detector/component-test.js","coffee-police/tests/integration/components/video-preview/box/component-test.js","coffee-police/tests/integration/components/video-preview/component-test.js","coffee-police/tests/lint/app.lint-test.js","coffee-police/tests/lint/templates.template.lint-test.js","coffee-police/tests/lint/tests.lint-test.js","coffee-police/tests/test-helper.js","coffee-police/tests/unit/services/face-detector-test.js","coffee-police/tests/unit/services/face-ranker-test.js","coffee-police/tests/unit/services/webcam-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"coffee-police/tests/helpers/finish-render\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default() {\n    return (0, _testHelpers.waitUntil)(() => {\n      let {\n        hasRunLoop,\n        hasPendingRequests,\n        hasPendingWaiters\n      } = (0, _testHelpers.getSettledState)();\n\n      if (hasRunLoop || hasPendingRequests || hasPendingWaiters) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n});","define(\"coffee-police/tests/helpers/image\", [\"exports\", \"sinon\"], function (_exports, _sinon) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.sampleImage = sampleImage;\n  _exports.sampleVideo = sampleVideo;\n\n  function sampleImage() {\n    let canvas = document.createElement('canvas');\n    let ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(randomInt(150), randomInt(75), randomInt(150), randomInt(75));\n    return canvas;\n  }\n\n  function sampleVideo() {\n    let image = sampleImage();\n    image.play = _sinon.default.stub();\n    image.pause = _sinon.default.stub();\n    image.videoWidth = image.width;\n    image.videoHeight = image.height;\n    return image;\n  }\n\n  function randomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n});","define(\"coffee-police/tests/integration/components/people-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | people-list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      let store = this.owner.lookup('service:store');\n      await store.addRecord({\n        type: 'person',\n        name: 'John'\n      });\n      await store.addRecord({\n        type: 'person',\n        name: 'Kate'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"N4pccOoS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"people-list\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-person-form]').exists();\n      assert.dom('[data-test-person]').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"coffee-police/tests/integration/components/people-list/form/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | people-list/form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it creates new people', async function (assert) {\n      let face = {\n        image: {\n          toDataURL() {\n            return '123456789';\n          }\n\n        }\n      };\n\n      let detect = _sinon.default.stub(this.owner.lookup('service:face-detector'), 'detect').returns(Ember.RSVP.resolve([face, {}, {}]));\n\n      let store = this.owner.lookup('service:store');\n\n      let addRecord = _sinon.default.spy(store, 'addRecord');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"FjVM3Jyb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[22,\\\"people-list/form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-person-form]').exists();\n      assert.dom('input[type=submit]').isDisabled();\n      await (0, _testHelpers.fillIn)('input[name=\"person[name]\"]', 'John');\n      await (0, _testHelpers.click)('input[type=submit]');\n      assert.ok(detect.calledOnce);\n      assert.deepEqual(addRecord.getCall(0).args[0], {\n        type: 'person',\n        name: 'John',\n        image: '123456789'\n      });\n      assert.dom('input[name=\"person[name]\"]').hasValue('');\n      assert.dom('input[type=submit]').isDisabled();\n    });\n  });\n});","define(\"coffee-police/tests/integration/components/people-list/item/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | people-list/item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.model = {\n        id: 242,\n        name: 'Sofia',\n        image: '/images/face-1.jpg',\n        remove: _sinon.default.stub()\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+TqGGxG/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"people-list/item\\\",null,[[\\\"model\\\"],[[24,[\\\"model\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.dom('[data-test-person]').exists();\n      assert.dom(this.element).includesText('Sofia');\n      assert.dom('img').hasAttribute('src', /face-1.jpg/);\n    });\n    (0, _qunit.test)('it removes records', async function (assert) {\n      await (0, _testHelpers.click)('button[name=\"removePerson[242]\"]');\n      assert.ok(this.model.remove.calledOnce);\n    });\n  });\n});","define(\"coffee-police/tests/integration/components/person-detector/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\", \"coffee-police/tests/helpers/finish-render\"], function (_qunit, _emberQunit, _testHelpers, _sinon, _finishRender) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | person-detector', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.detectStub = _sinon.default.stub(this.owner.lookup('service:face-ranker'), 'detect');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"l1cyJ2p/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"person-detector\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n    (0, _qunit.test)('it calls detect() and waits for results', async function (assert) {\n      let resolvePromise;\n      this.detectStub.returns(new Ember.RSVP.Promise(r => resolvePromise = r));\n      (0, _testHelpers.click)('button[name=detect]');\n      await (0, _finishRender.default)();\n      assert.dom('button[name=detect]').isDisabled();\n      resolvePromise();\n      await (0, _testHelpers.settled)();\n      assert.dom('button[name=detect]').isNotDisabled();\n    });\n    (0, _qunit.test)('it renders confident match', async function (assert) {\n      this.detectStub.returns(Ember.RSVP.resolve({\n        name: 'Camryn Klocko'\n      }));\n      await (0, _testHelpers.click)('button[name=detect]');\n      await (0, _finishRender.default)();\n      assert.dom(this.element).includesText('Hi, Camryn Klocko');\n    });\n    (0, _qunit.test)('it renders probable matches', async function (assert) {\n      this.detectStub.returns(Ember.RSVP.resolve([{\n        name: 'Camryn Klocko'\n      }, {\n        name: 'William Farrell'\n      }, {\n        name: 'Paige McDermott'\n      }, {\n        name: 'Rhea Johnston'\n      }, {\n        name: 'Dr. Dorcas Legros'\n      }]));\n      await (0, _testHelpers.click)('button[name=detect]');\n      await (0, _finishRender.default)();\n      assert.dom(this.element).includesText('Hi, Camryn Klocko, William Farrell, Paige McDermott, or someone else...?');\n      assert.dom(this.element).doesNotIncludeText('Rhea Johnston');\n      assert.dom(this.element).doesNotIncludeText('Dr. Dorcas Legros');\n    });\n    (0, _qunit.test)('it renders no-match', async function (assert) {\n      this.detectStub.returns(Ember.RSVP.resolve());\n      await (0, _testHelpers.click)('button[name=detect]');\n      await (0, _finishRender.default)();\n      assert.dom(this.element).includesText('Do we know each other...?');\n    });\n  });\n});","define(\"coffee-police/tests/integration/components/video-preview/box/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | video-preview/box', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.model = {\n        box: {\n          left: 12,\n          top: 34,\n          width: 56,\n          height: 78\n        }\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"SEHs8+vA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"video-preview/box\\\",null,[[\\\"model\\\"],[[24,[\\\"model\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-box]').hasAttribute('style', /left: 12px/);\n      assert.dom('[data-test-box]').hasAttribute('style', /top: 34px/);\n      assert.dom('[data-test-box]').hasAttribute('style', /width: 56px/);\n      assert.dom('[data-test-box]').hasAttribute('style', /height: 78px/);\n    });\n  });\n});","define(\"coffee-police/tests/integration/components/video-preview/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | video-preview', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.stream = new MediaStream();\n      this.webcamStart = _sinon.default.stub().returns(Ember.RSVP.resolve());\n      this.owner.register('service:webcam', Ember.Object.extend({\n        start: this.webcamStart,\n        stream: this.stream\n      }));\n      this.faceDetectorStart = _sinon.default.stub().returns(Ember.RSVP.resolve());\n      this.owner.register('service:face-detector', Ember.Object.extend({\n        start: this.faceDetectorStart,\n        faces: Object.freeze([{}, {}])\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"83zO15PQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"video-preview\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n    (0, _qunit.test)('it displays video from the webcam service', async function (assert) {\n      let video = this.element.querySelector('video');\n      assert.ok(this.webcamStart.calledOnce);\n      assert.equal(video.srcObject, this.stream);\n    });\n    (0, _qunit.test)('it displays faces from the face detector service', async function (assert) {\n      assert.ok(this.faceDetectorStart.calledOnce);\n      assert.dom('[data-test-box]').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"coffee-police/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/people-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/people-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/people-list/form/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/people-list/form/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/people-list/item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/people-list/item/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/person-detector/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/person-detector/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/video-preview/box/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-preview/box/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/video-preview/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-preview/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('data-models/person.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data-models/person.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('data-sources/backup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data-sources/backup.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('data-strategies/store-backup-sync.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data-strategies/store-backup-sync.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/face-detector.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/face-detector.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/face-ranker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/face-ranker.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/webcam.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/webcam.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/bem-states.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/bem-states.js should pass ESLint\\n\\n');\n  });\n});","define(\"coffee-police/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('coffee-police/components/people-list/form/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/people-list/form/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/components/people-list/item/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/people-list/item/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/components/people-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/people-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/components/person-detector/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/person-detector/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/components/video-preview/box/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/video-preview/box/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/components/video-preview/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/components/video-preview/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coffee-police/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coffee-police/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"coffee-police/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('helpers/finish-render.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/finish-render.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/image.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/image.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/people-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/people-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/people-list/form/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/people-list/form/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/people-list/item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/people-list/item/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/person-detector/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/person-detector/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/video-preview/box/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-preview/box/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/video-preview/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-preview/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/face-detector-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/face-detector-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/face-ranker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/face-ranker-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/webcam-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/webcam-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"coffee-police/tests/test-helper\", [\"coffee-police/app\", \"coffee-police/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"coffee-police/tests/unit/services/face-detector-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\", \"coffee-police/services/face-detector\"], function (_qunit, _emberQunit, _testHelpers, _sinon, _faceDetector) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | face-detector', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.frame = document.createElement('canvas');\n      this.getFrame = _sinon.default.stub(this.owner.lookup('service:webcam'), 'getFrame').returns(Ember.RSVP.resolve(this.frame));\n      this.detectionStub = _sinon.default.stub().returns(Ember.RSVP.resolve([]));\n      this.FaceAPIStub = {\n        nets: {\n          ssdMobilenetv1: {\n            loadFromUri: _sinon.default.stub().returns(Ember.RSVP.resolve())\n          },\n          faceRecognitionNet: {\n            loadFromUri: _sinon.default.stub().returns(Ember.RSVP.resolve())\n          },\n          faceLandmark68Net: {\n            loadFromUri: _sinon.default.stub().returns(Ember.RSVP.resolve())\n          }\n        },\n        detectAllFaces: _sinon.default.stub().returns({\n          withFaceLandmarks: _sinon.default.stub().returns({\n            withFaceDescriptors: this.detectionStub\n          })\n        }),\n        detectSingleFace: _sinon.default.stub().returns({\n          withFaceLandmarks: _sinon.default.stub().returns({\n            withFaceDescriptor: _sinon.default.stub().returns({\n              descriptor: [1, 2, 3]\n            })\n          })\n        })\n      };\n      this.service = this.owner.lookup('service:face-detector');\n      this.service.FaceAPI = this.FaceAPIStub;\n    });\n    (0, _qunit.module)('face detection', function (hooks) {\n      hooks.beforeEach(function () {\n        this.faces = [{}, {}, {}];\n        this.detectionStub.returns(Ember.RSVP.resolve(this.faces));\n      });\n      (0, _qunit.test)('it loads models', async function (assert) {\n        await this.service.setup().then(() => assert.ok(true), () => assert.ok(false));\n        assert.ok(this.FaceAPIStub.nets.ssdMobilenetv1.loadFromUri.calledOnce);\n        assert.ok(this.FaceAPIStub.nets.faceRecognitionNet.loadFromUri.calledOnce);\n        assert.ok(this.FaceAPIStub.nets.faceLandmark68Net.loadFromUri.calledOnce);\n      });\n      (0, _qunit.test)('it detects faces', async function (assert) {\n        let setupSpy = _sinon.default.spy(this.service, 'setup');\n\n        await this.service.detect().then(faces => assert.equal(faces.length, this.faces.length), () => assert.ok(false));\n        assert.ok(setupSpy.called);\n        assert.ok(this.getFrame.calledOnce);\n        assert.equal(this.FaceAPIStub.detectAllFaces.getCall(0).args[0], this.frame);\n        assert.deepEqual(this.service.faces.mapBy('detection'), this.faces);\n      });\n      (0, _qunit.test)('it runs in loop', async function (assert) {\n        let detectSpy = _sinon.default.spy(this.service, 'detect');\n\n        await this.service.start();\n        assert.ok(detectSpy.calledOnce);\n        Ember.run.next(() => {\n          assert.ok(detectSpy.calledTwice);\n          this.service.stop();\n        });\n        await (0, _testHelpers.settled)();\n        assert.ok(detectSpy.calledTwice);\n      });\n    });\n    (0, _qunit.module)('face recognition', function (hooks) {\n      hooks.beforeEach(async function () {\n        let store = this.owner.lookup('service:store');\n        this.person = await store.addRecord({\n          type: 'person',\n          name: 'John',\n          image: '/images/face-1.jpg'\n        });\n        this.detectionStub.returns(Ember.RSVP.resolve([{\n          descriptor: [5, 6, 7]\n        }]));\n      });\n      (0, _qunit.test)('it defines face matcher', async function (assert) {\n        let matcher = await this.service.faceMatcher;\n        assert.equal(this.FaceAPIStub.detectSingleFace.getCall(0).args[0].src, \"\".concat(location.origin, \"/images/face-1.jpg\"));\n        assert.ok(matcher instanceof _faceDetector.FaceMatcher);\n        assert.deepEqual(matcher.candidates, [{\n          descriptors: [[1, 2, 3]],\n          person: this.person\n        }]);\n      });\n      (0, _qunit.test)('it performs face match for each face', async function (assert) {\n        await this.service.setup();\n        let matcher = await this.service.faceMatcher;\n\n        _sinon.default.stub(matcher, 'computeMeanDistance').returns(7.89);\n\n        let matchSpy = _sinon.default.spy(matcher, 'match');\n\n        let faces = await this.service.detect();\n        assert.deepEqual(matchSpy.getCall(0).args[0], [5, 6, 7]);\n        assert.deepEqual(faces.mapBy('matches'), [[{\n          person: this.person,\n          distance: 7.89\n        }]]);\n      });\n    });\n    (0, _qunit.module)('FaceMatcher', function () {\n      (0, _qunit.test)('it compares given descriptor with all candidates', async function (assert) {\n        let person1 = {};\n        let person2 = {};\n        let person3 = {};\n\n        let matcher = _faceDetector.FaceMatcher.create({\n          candidates: [{\n            person: person1,\n            descriptors: [[1, 1, 1]]\n          }, {\n            person: person2,\n            descriptors: [[2, 2, 2]]\n          }, {\n            person: person3,\n            descriptors: [[3, 3, 3]]\n          }]\n        });\n\n        let matches = matcher.match([1, 1, 1]);\n        assert.equal(matches.length, 3);\n        assert.deepEqual(matches.sortBy('distance').mapBy('person'), [person3, person2, person1]);\n      });\n    });\n    (0, _qunit.module)('Face model', function () {\n      (0, _qunit.test)('it crops image', async function (assert) {\n        let box = {\n          left: 12,\n          top: 34,\n          width: 56,\n          height: 78\n        };\n\n        let face = _faceDetector.Face.create({\n          detection: {\n            detection: {\n              box\n            }\n          },\n          frame: document.createElement('canvas')\n        });\n\n        let offset = (56 + 78) / 2;\n        assert.equal(face.box, box);\n        assert.equal(face.image.width, 56 + offset);\n        assert.equal(face.image.height, 78 + offset);\n      });\n      (0, _qunit.test)('it picks probable and confident matches', async function (assert) {\n        const A = {\n          distance: 0.9,\n          person: 'A'\n        };\n        const B = {\n          distance: 0.6,\n          person: 'B'\n        };\n        const C = {\n          distance: 0.1,\n          person: 'C'\n        };\n        const D = {\n          distance: 0.7,\n          person: 'D'\n        };\n\n        let face = _faceDetector.Face.create({\n          matches: [A, B, C, D]\n        });\n\n        assert.equal(face.confidentMatch, C);\n        assert.deepEqual(face.probableMatches, [B, D]);\n      });\n      (0, _qunit.test)('it computes face size', async function (assert) {\n        let box = {\n          left: 12,\n          top: 34,\n          width: 56,\n          height: 78\n        };\n\n        let face = _faceDetector.Face.create({\n          detection: {\n            detection: {\n              box\n            }\n          }\n        });\n\n        assert.equal(face.size, 56 * 78);\n      });\n    });\n  });\n});","define(\"coffee-police/tests/unit/services/face-ranker-test\", [\"qunit\", \"ember-qunit\", \"sinon\", \"lolex\"], function (_qunit, _emberQunit, _sinon, _lolex) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | face-ranker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    const A = {\n      person: 'A'\n    };\n    const B = {\n      person: 'B'\n    };\n    const C = {\n      person: 'C'\n    };\n    hooks.beforeEach(function () {\n      let faceDetector = this.owner.lookup('service:face-detector');\n      this.detectStub = _sinon.default.stub(faceDetector, 'detect').returns(Ember.RSVP.resolve([]));\n      this.service = this.owner.lookup('service:face-ranker');\n    });\n    (0, _qunit.module)('time limits', function () {\n      (0, _qunit.test)('it stops detecting after reaching upper time limit', function (assert) {\n        this.clock = _lolex.default.install();\n        Ember.run(() => {\n          this.service.detect(1000, 3000);\n        });\n        assert.ok(this.detectStub.calledOnce);\n        this.clock.tick(1500);\n        assert.ok(this.detectStub.getCalls().length > 1);\n        this.clock.tick(3000);\n        this.detectStub.reset();\n        this.detectStub.returns(Ember.RSVP.resolve([]));\n        this.clock.tick(3001);\n        assert.ok(this.detectStub.notCalled);\n        this.clock.uninstall();\n      });\n      (0, _qunit.test)('it stops detecting when confident match is found after reaching lower time limit', function (assert) {\n        this.clock = _lolex.default.install();\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          confidentMatch: A\n        }]));\n        Ember.run(() => {\n          this.service.detect(1000, 3000);\n        });\n        assert.ok(this.detectStub.calledOnce);\n        this.clock.tick(500);\n        assert.ok(this.detectStub.getCalls().length > 1);\n        this.clock.tick(1000);\n        this.detectStub.reset();\n        this.detectStub.returns(Ember.RSVP.resolve([]));\n        this.clock.tick(3000);\n        assert.ok(this.detectStub.notCalled);\n        this.clock.uninstall();\n      });\n    });\n    (0, _qunit.module)('results combining', function () {\n      (0, _qunit.test)('if confident, it returns single match', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          confidentMatch: A\n        }, {\n          probableMatches: [B]\n        }, {\n          probableMatches: [B, C]\n        }]));\n        let result = await this.service.detect(0, 0);\n        assert.deepEqual(result, 'A');\n      });\n      (0, _qunit.test)('if multiple confident faces found, it returns multiple matches', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          confidentMatch: A\n        }, {\n          confidentMatch: B\n        }, {\n          confidentMatch: B\n        }, {\n          probableMatches: [B, C]\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.deepEqual(results, ['A', 'B', 'C']);\n      });\n      (0, _qunit.test)('if no confident faces found, it returns probable matches', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          probableMatches: [B]\n        }, {\n          probableMatches: [B, C]\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.deepEqual(results, ['B', 'C']);\n      });\n      (0, _qunit.test)('if no confident or probable faces found, it returns null', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          probableMatches: []\n        }, {\n          probableMatches: []\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.equal(results, null);\n      });\n    });\n    (0, _qunit.module)('sorting & filtering', function () {\n      (0, _qunit.test)('it filters out small faces', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          size: 100,\n          confidentMatch: A\n        }, {\n          size: 80,\n          confidentMatch: B\n        }, {\n          size: 50,\n          confidentMatch: C\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.deepEqual(results, ['A', 'B']);\n      });\n      (0, _qunit.test)('it sorts faces by distance', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          probableMatches: [{\n            person: 'A',\n            distance: 0.7\n          }, {\n            person: 'B',\n            distance: 0.6\n          }]\n        }, {\n          probableMatches: [{\n            person: 'A',\n            distance: 0.1\n          }, {\n            person: 'B',\n            distance: 0.5\n          }]\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.deepEqual(results, ['B', 'A']);\n      });\n      (0, _qunit.test)('it sorts faces by size', async function (assert) {\n        this.detectStub.returns(Ember.RSVP.resolve([{\n          size: 100,\n          probableMatches: [{\n            person: 'A',\n            distance: 0.7\n          }, {\n            person: 'B',\n            distance: 0.6\n          }]\n        }, {\n          size: 80,\n          probableMatches: [{\n            person: 'A',\n            distance: 0.1\n          }, {\n            person: 'B',\n            distance: 0.5\n          }]\n        }]));\n        let results = await this.service.detect(0, 0);\n        assert.deepEqual(results, ['A', 'B']);\n      });\n    });\n  });\n});","define(\"coffee-police/tests/unit/services/webcam-test\", [\"qunit\", \"ember-qunit\", \"sinon\", \"coffee-police/tests/helpers/image\"], function (_qunit, _emberQunit, _sinon, _image) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | webcam', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.service = this.owner.lookup('service:webcam');\n      this.stream = new MediaStream();\n      this.mediaDevices = {\n        getUserMedia: _sinon.default.stub().returns(Ember.RSVP.resolve(this.stream))\n      };\n      this.mediaDevicesStub = _sinon.default.stub(navigator, 'mediaDevices').value(this.mediaDevices);\n    });\n    hooks.afterEach(function () {\n      this.mediaDevicesStub.restore();\n    });\n    (0, _qunit.test)('it detects lack of user media support', function (assert) {\n      this.mediaDevices.getUserMedia = null;\n      assert.notOk(this.service.isSupported);\n      this.service.setup().then(() => assert.ok(false), error => assert.equal(error, 'This browser doesn’t support user media'));\n    });\n    (0, _qunit.test)('it retrieves video stream', async function (assert) {\n      assert.ok(this.service.isSupported);\n      assert.notOk(this.service.isReady);\n      await this.service.setup().then(() => assert.ok(true), () => assert.ok(false));\n      assert.ok(this.service.isReady);\n      assert.equal(this.service.stream, this.stream);\n      assert.ok(this.service.video.srcObject, this.stream);\n    });\n    (0, _qunit.test)('it plays video', async function (assert) {\n      let setupSpy = _sinon.default.spy(this.service, 'setup');\n\n      let play = _sinon.default.stub();\n\n      let pause = _sinon.default.stub();\n\n      this.service.reopen({\n        video: Object.freeze({\n          play,\n          pause\n        })\n      });\n      await this.service.start();\n      assert.ok(setupSpy.calledOnce);\n      assert.ok(play.calledOnce);\n      assert.equal(this.service.isPlaying, true);\n      await this.service.start();\n      assert.ok(play.calledOnce);\n      await this.service.stop();\n      assert.ok(pause.calledOnce);\n      assert.equal(this.service.isPlaying, false);\n    });\n    (0, _qunit.test)('it captures video frame', async function (assert) {\n      let startSpy = _sinon.default.spy(this.service, 'start');\n\n      let sourceImage = (0, _image.sampleVideo)();\n\n      _sinon.default.stub(this.service, 'video').value(sourceImage);\n\n      await this.service.getFrame().then(frame => {\n        assert.equal(frame.toDataURL(), sourceImage.toDataURL());\n      }, error => {\n        assert.ok(false, error);\n      });\n      assert.ok(startSpy.calledOnce);\n      assert.ok(sourceImage.play.calledOnce);\n      assert.ok(sourceImage.pause.calledOnce);\n    });\n  });\n});","define('coffee-police/config/environment', [], function() {\n  var prefix = 'coffee-police';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('coffee-police/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}